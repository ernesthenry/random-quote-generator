{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Quote","props","generateQuote","fetch","then","response","json","data","setState","console","log","handleClick","e","randomIndex","Math","floor","random","preventDefault","quote","state","quotes","author","this","id","className","onClick","href","class","aria-hidden","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gQA6DeA,G,wDAzDb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAYRC,cAAgB,WACdC,MAAM,0IACRC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACzBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZD,KAAMA,IAGRE,QAAQC,IAAIH,OArBI,EA0BlBI,YAAc,SAACC,GACf,IAAMC,EAAcC,KAAKC,MAAsB,IAAhBD,KAAKE,UAElCJ,EAAEK,iBACF,EAAKT,SAAS,CACZU,MAAO,EAAKC,MAAMZ,KAAKa,OAAOP,GAAaK,MAC3CG,OAAO,EAAKF,MAAMZ,KAAKa,OAAOP,GAAaQ,UA9B7C,EAAKF,MAAM,CACTZ,KAAM,GACNW,MAAM,GACNG,OAAO,IALO,E,gEAUhBC,KAAKpB,kB,+BA2BP,OACE,yBAAKqB,GAAG,YAAYC,UAAU,aAC5B,6BACA,uBAAGD,GAAG,QAAQD,KAAKH,MAAMD,OACzB,uBAAGK,GAAG,UAAUD,KAAKH,MAAME,QAC3B,uBAAGG,UAAU,YAAb,sBACA,4BAAQD,GAAG,YAAYE,QAASH,KAAKX,YAAaa,UAAU,OAA5D,YAGA,uBAAGD,GAAG,cAAcG,KAAK,4BAA2B,uBAAGC,MAAM,gBAAgBC,cAAY,gB,GA/C3EC,IAAMC,YCSNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.b8a07f91.chunk.js","sourcesContent":["import React from 'react'\r\nimport './App.css'\r\n\r\nclass Quote extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      data: '',\r\n      quote:'',\r\n      author:''\r\n    }\r\n  }\r\n  \r\n  componentDidMount(){\r\n    this.generateQuote();\r\n  }\r\n  \r\n  generateQuote = () => {\r\n    fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\")\r\n .then(response => response.json())\r\n  .then(data => {\r\n    this.setState({\r\n      data: data,\r\n      \r\n    })\r\n    console.log(data);\r\n  })\r\n    \r\n  }\r\n  \r\n  handleClick = (e) => {\r\n  const randomIndex = Math.floor(Math.random() * 102);   \r\n\r\n    e.preventDefault()\r\n    this.setState({\r\n      quote: this.state.data.quotes[randomIndex].quote,\r\n      author:this.state.data.quotes[randomIndex].author\r\n      \r\n    })\r\n  }\r\n  render(){\r\n  return(\r\n    <div id='quote-box' className='quote-box'>\r\n      <div>\r\n      <p id='text'>{this.state.quote}</p>\r\n      <p id='author'>{this.state.author}</p>\r\n      <p className='my-quote'>Wanna see a quote?</p>\r\n      <button id='new-quote' onClick={this.handleClick} className='btn'>Generate  \r\n      </button>\r\n      \r\n      <a id='tweet-quote' href='twitter.com/intent/tweet'><i class=\"fa fa-twitter\" aria-hidden=\"true\"></i></a>\r\n\r\n      </div>\r\n     \r\n      \r\n    </div>\r\n    \r\n  )\r\n}\r\n}\r\n\r\nexport default Quote;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}